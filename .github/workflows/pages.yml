name: Docs
permissions:
  contents: read
on:
  pull_request:
  push:
    branches:
      - main
  merge_group:
  workflow_dispatch:
jobs:
  get-python-versions:
    uses: ./.github/workflows/get-python-versions.yml
  build-docs:
    needs: get-python-versions
    runs-on: ubuntu-latest
    name: Build HTML docs
    strategy:
      fail-fast: false
      matrix:
        python-version: ${{ fromJson(needs.get-python-versions.outputs.python-versions) }}
    steps:
      - uses: actions/checkout@v5
        with:
          lfs: true
      - name: Install uv
        uses: astral-sh/setup-uv@v7
        with:
          python-version: ${{ matrix.python-version }}
      - run: make install
      - run: make setup-ipython-config
      - run: make docs
      - uses: actions/upload-artifact@v4
        with:
          name: html-docs-${{ matrix.python-version }}
          path: "./docs/_build/html/"
  build-docs-result:
    runs-on: ubuntu-latest
    name: Build docs result
    needs: build-docs
    if: always()
    steps:
      - name: Check build-docs matrix results
        run: |
          if [[ "${{ needs.build-docs.result }}" == "success" ]]; then
            echo "All build-docs jobs succeeded"
            exit 0
          else
            echo "One or more build-docs jobs failed"
            exit 1
          fi
  get-latest-python:
    needs: get-python-versions
    runs-on: ubuntu-latest
    outputs:
      latest-python: ${{ steps.get-latest.outputs.latest-python }}
    steps:
      - name: Get latest Python version
        id: get-latest
        run: |
          versions='${{ needs.get-python-versions.outputs.python-versions }}'
          latest=$(echo "$versions" | jq -r '.[-1]')
          echo "latest-python=$latest" >> "$GITHUB_OUTPUT"
          echo "Latest Python version: $latest"
  build-docs-pdf:
    runs-on: ubuntu-latest
    name: Build PDF docs
    steps:
      - uses: actions/checkout@v5
        with:
          lfs: true
      - name: Install uv
        uses: astral-sh/setup-uv@v7
      - run: make install
      - name: Cache ImageMagick
        uses: actions/cache@v4
        with:
          path: /var/cache/apt/archives
          key: ${{ runner.os }}-imagemagick
      - name: Install ImageMagick
        run: |
          sudo apt-get update -y
          sudo apt-get install -y imagemagick
      - run: make setup-ipython-config
      - name: Generate LaTeX files
        run: make docs-latex || echo "LaTeX build completed with warnings, continuingâ€¦"
      - name: Compile LaTeX document
        continue-on-error: true
        uses: xu-cheng/latex-action@v4
        with:
          texlive_version: latest
          os: alpine
          pre_compile: cd docs/_build/latex
          extra_system_packages: "ghostscript"
          root_file: qpdk.tex
          compiler: latexmk
          continue_on_error: true
          latexmk_use_xelatex: true
          args: -pdfxe -xelatex -interaction=nonstopmode -f -file-line-error
      - uses: actions/upload-artifact@v4
        with:
          name: pdf-docs
          path: "./docs/_build/latex/qpdk.pdf"
  deploy-docs:
    runs-on: ubuntu-latest
    name: Deploy to GitHub Pages
    needs: [build-docs, build-docs-pdf, get-latest-python]
    if: ${{ github.ref == 'refs/heads/main' && github.event_name == 'push' }}
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Download HTML artifact (latest Python)
        uses: actions/download-artifact@v5
        with:
          name: html-docs-${{ needs.get-latest-python.outputs.latest-python }}
          path: _site
      - name: Download PDF artifact
        uses: actions/download-artifact@v5
        with:
          name: pdf-docs
          path: _site
      - name: Upload merged pages artifact
        uses: actions/upload-pages-artifact@v4
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
